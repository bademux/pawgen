plugins {
	id 'application'
	id 'groovy'
	id 'org.gradlex.extra-java-module-info' version '1.1'
}

var generatedDir = file("$buildDir/generated/src/java")

version rootProject.version

task generateJava() {
	outputs.dir generatedDir
	doLast {
		var genFile = file("$generatedDir/build/Build.java")
		mkdir genFile.parentFile
		genFile.text = "package build; public interface Build { String VERSION = \"$project.version\"; }"
	}
}

sourceSets.main.java.srcDir generatedDir
compileJava.dependsOn generateJava

compileJava {
	sourceCompatibility = jdkVersion
	targetCompatibility = jdkVersion
	options.compilerArgs += '--enable-preview'
}

test {
	jvmArgs += "--enable-preview"
	useJUnitPlatform()
	modularity.inferModulePath = false
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(jdkVersion)
	}
	modularity.inferModulePath = true
}

application {
	applicationName = 'pawgen'
	mainClass = 'net.pawet.pawgen.Application'
	mainModule = 'pawgen'
}

run {
	enableAssertions = true
	jvmArgs = ['-Xmx2G', '-XX:+UseShenandoahGC', '--enable-preview']
	systemProperties = ['java.awt.headless': true, 'file.encoding': 'UTF-8', 'sun.jnu.encoding': 'UTF-8', 'java.util.logging.config.class': 'net.pawet.pawgen.utils.LoggingConfig']
}

jar {
	manifest {
		attributes = ['Main-Class': application.mainClass.get(), 'Version': project.version]
	}
}

configurations {
	testCompileClasspath {
		attributes { attribute(Attribute.of('javaModule', Boolean), false) }
		exclude module: 'jai-imageio-core' // exclude loading image by mmap in tests
	}
	testRuntimeClasspath {
		attributes { attribute(Attribute.of('javaModule', Boolean), false) }
		exclude module: 'jai-imageio-core' // exclude loading image by mmap in tests
	}

}

dependencies {

	compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
	implementation project(path: ':twelvemonkeys', configuration: 'moduleJar')
	implementation project(path: ':deployer')
	implementation group: 'com.github.jai-imageio', name: 'jai-imageio-core', version: jaiVersion
	implementation group: 'com.github.spullara.mustache.java', name: 'compiler', version: mustacheVersion
	implementation group: 'org.eclipse.parsson', name: 'parsson', version: parssonVersion
	implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: slf4jVersion

	testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
	testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

	testImplementation enforcedPlatform(group: 'org.spockframework', name: 'spock-bom', version: spockVersion)
	testImplementation group: 'org.spockframework', name: 'spock-core'
	testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: bytebuddyVersion
	testImplementation group: 'org.objenesis', name: 'objenesis', version: objenesisVersion
	testImplementation group: 'com.google.jimfs', name: 'jimfs', version: memoryfilesystemVersion
	testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8-standalone', version: wiremockVersion

}

extraJavaModuleInfo {
	failOnMissingModuleInfo = true
	module('com.github.spullara.mustache.java:compiler', 'com.github.mustachejava') {
		requiresStatic 'java.logging'

		exports 'com.github.mustachejava'
		exports 'com.github.mustachejava.reflect'
		exports 'com.github.mustachejava.util'
	}

	module("twelvemonkeys-$twelvemonkeysVersion-all.jar", 'com.twelvemonkeys.imageio') {
		requiresStatic 'java.desktop'

		exports 'com.twelvemonkeys.imageio.stream'
		exports 'com.twelvemonkeys.imageio.color'
		exports 'com.twelvemonkeys.imageio.plugins.jpeg'
		exports 'com.twelvemonkeys.imageio.plugins.webp'
		exports 'com.twelvemonkeys.imageio.plugins.tiff'
	}

	module('com.github.jai-imageio:jai-imageio-core', 'com.github.jai_imageio') {
		requiresStatic 'java.desktop'

		exports 'com.github.jaiimageio.impl.stream'
		exports 'com.github.jaiimageio.impl.plugins.wbmp'
		exports 'com.github.jaiimageio.impl.plugins.bmp'
		exports 'com.github.jaiimageio.impl.plugins.gif'
		exports 'com.github.jaiimageio.impl.plugins.pcx'
		exports 'com.github.jaiimageio.impl.plugins.pnm'
		exports 'com.github.jaiimageio.impl.plugins.raw'

		//use from twelvemonkeys
		ignoreServiceProvider 'com.github.jaiimageio.impl.plugins.tiff.TIFFImageReaderSpi'
		ignoreServiceProvider 'com.github.jaiimageio.impl.plugins.tiff.TIFFImageWriterSpi'
	}
}

task jlink(type: Exec, dependsOn: jar) {
	group 'distribution'
	var launcherFileName = 'run'

	outputs.dir project.file("$buildDir/jre")
	var jdkPath = javaToolchains.compilerFor(java.toolchain).get().metadata.installationPath
	workingDir buildDir
	executable jdkPath.file('bin/jlink').asFile
	argumentProviders << (CommandLineArgumentProvider) {
		[  // lazy arguments
		   '--module-path', (configurations.runtimeClasspath.files + jar.archiveFile.asFile.get()).join(System.getProperty('path.separator', ':')),
		   '--add-modules', application.mainModule.get(),
		   '--output', outputs.files.singleFile.absolutePath,
		   '--launcher', launcherFileName + "=${application.mainModule.get()}/${application.mainClass.get()}" as String,
		   '--compress', 2 as String, //zip
		   '--vm', 'server',
		   '--no-header-files', '--no-man-pages',
		   '--generate-cds-archive',
		   '--ignore-signing-information',
		   '--release-info', "add:APP_VERSION=$version" as String,
		   '--vendor-bug-url', 'https://github.com/bademux/pawgen/issues',
		]
	}

	doFirst {
		outputs.files.singleFile.deleteDir() // jlink expects the output directory to not exist when it runs
	}
	doLast {
		var prefix = 'JLINK_VM_OPTIONS='
		var opts = (run.jvmArgs + run.systemProperties.collect({ "-D$it.key=$it.value" })).join(' ')
		new File(outputs.files.singleFile, 'bin').listFiles({ it.name.startsWith(launcherFileName) } as FileFilter).each {
			it.text = it.text.replace(prefix, it.name.endsWith('.bat') ? "\"$prefix$opts\"" : "$prefix\"$opts\"")
		}
	}
}

