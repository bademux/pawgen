plugins {
	id 'application'
	id 'groovy'
	id 'org.graalvm.buildtools.native' version '0.9.16'
	id 'org.beryx.jlink' version '2.25.0'
	id 'com.palantir.git-version' version '0.15.0'
}

def details = versionDetails(prefix: 'v@')
version "${details.lastTag}.${details.commitDistance}-${details.gitHash}" as String

repositories {
	mavenCentral()
}

def generatedDir = file("$buildDir/generated/src/java")

task generateJava() {
	outputs.dir generatedDir
	doLast {
		def genFile = file("$generatedDir/build/Build.java")
		mkdir genFile.parentFile
		genFile.text = "package build; public interface Build { String VERSION = \"$project.version\"; }"
	}
}

sourceSets.main.java.srcDir generatedDir
compileJava.dependsOn generateJava

compileJava {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

java {
	modularity.inferModulePath = true
}

application {
	mainClass.set('net.pawet.pawgen.Application')
	applicationName 'pawgen'
}

run {
	enableAssertions = true
	jvmArgs = ['-Xmx2G']
	systemProperties = ['java.awt.headless': true, 'file.encoding': 'UTF-8', 'sun.jnu.encoding': 'UTF-8', 'java.util.logging.config.class': 'net.pawet.pawgen.utils.LoggingConfig']
}

jar {
	manifest {
		attributes = ['Main-Class': application.mainClass.get(), 'Version': project.version]
	}
}

jlink {
	options = ['--compress', '2', '--no-header-files', '--no-man-pages']
	launcher {
		name = 'emk'
		noConsole = true
		jvmArgs = ['-Xmx2G', '-Djava.awt.headless=true', '-Dfile.encoding=UTF-8', '-Djava.util.logging.config.class=net.pawet.pawgen.utils.LoggingConfig']
	}

	targetPlatform('17-linux-x64', "$buildDir/jdk/jdk17-linux-x64")
	targetPlatform('17-windows-x64', "$buildDir/jdk/jdk17-windows-x64")
}

graalvmNative {
	toolchainDetection = true
	testSupport = false
	binaries {
		main {
			// Main options
			debug.set(true) // Determines if debug info should be generated, defaults to false
			verbose.set(true) // Add verbose output, defaults to false
			fallback.set(false) // Sets the fallback mode of native-image, defaults to false

			// Advanced options
			buildArgs '--install-exit-handlers', '--native-image-info'/*, '--static', '--report-unsupported-elements-at-runtime'*/
			// Passes '-H:Extra' to the native image builder options. This can be used to pass parameters which are not directly supported by this extension
			// Runtime options
			runtimeArgs '--help' // Passes '--help' to built image, during "nativeRun" task
			// Development options
			agent.enabled.set(false) // Enables the reflection agent. Can be also set on command line using '-Pagent'
		}
	}
}

configurations {
	fatJar.extendsFrom implementation
}

task fatJar(type: Jar) {
	group 'Build'
	manifest.attributes tasks.jar.manifest.attributes
	archiveBaseName.set("$project.name-full")
	from(
		{ configurations.fatJar.collect({ it.isDirectory() ? it : zipTree(it) }) },
		{ it.excludes = ['*.md', 'module-info.class'] }
	)
	with jar
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

test {
	useJUnitPlatform()
}

dependencies {
	compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
	implementation group: 'com.github.spullara.mustache.java', name: 'compiler', version: mustacheVersion
	implementation group: 'com.twelvemonkeys.imageio', name: 'imageio-jpeg', version: twelvemonkeysVersion
	implementation group: 'jakarta.json', name: 'jakarta.json-api', version: jakartajsonVersion
	implementation group: 'org.glassfish', name: 'jakarta.json', version: jakartajsonVersion, classifier: 'module'
	implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: slf4jVersion


	testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
	testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

	testImplementation enforcedPlatform(group: 'org.spockframework', name: 'spock-bom', version: spockVersion)
	testImplementation group: 'org.spockframework', name: 'spock-core'
	testImplementation group: 'net.bytebuddy', name: 'byte-buddy'
	testImplementation group: 'org.objenesis', name: 'objenesis'
	testImplementation group: 'com.google.jimfs', name: 'jimfs', version: memoryfilesystemVersion
	testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: wiremockVersion
}


jlink.targetPlatforms.get().each { name, targetPlatform ->
	def namePostfix = name.split('-').collect({ it.capitalize() }).join()
	def downloadTask = tasks.create(name: "downloadJdk$namePostfix") {
		def (javaVersion, os, arch) = name.split('-')
		inputs.property('javaVersion', javaVersion)
		inputs.property('os', os)
		inputs.property('arch', arch)
		outputs.file "$buildDir/${name}.${name.contains('windows') ? 'zip' : 'tgz'}"
		outputs.upToDateWhen { true }
		doLast {
			ant.get(src: "https://api.adoptium.net/v3/binary/latest/$inputs.properties.javaVersion/ga/$inputs.properties.os/$inputs.properties.arch/jdk/hotspot/normal/eclipse", dest: outputs.files.singleFile)
		}
	}

	tasks.jlink.dependsOn tasks.create(name: "unpackJdk$namePostfix", type: Copy, dependsOn: downloadTask) {
		File file = downloadTask.outputs.files.singleFile
		Closure<FileTree> archiveTree = file.name.endsWith('zip') ? project::zipTree : { tarTree(resources.gzip(it)) }
		from(archiveTree.call(file)) {
			eachFile { it.relativePath = new RelativePath(true, it.relativePath.segments.drop(1)) }
			includeEmptyDirs = false
		}
		into targetPlatform.jdkHome
		outputs.dir targetPlatform.jdkHome
	}
}
